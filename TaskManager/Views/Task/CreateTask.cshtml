@model TaskManager.Task

@{
    ViewBag.Title = "Görev Oluştur";
}
<head>
   
 
    <link rel="stylesheet" href="http://netdna.bootstrapcdn.com/bootstrap/3.2.0/css/bootstrap.min.css">
   
    <link href="~/Content/jQuery-File-Upload-9.18.0/css/style.css" rel="stylesheet" />
    
    <link href="~/Content/jQuery-File-Upload-9.18.0/css/jquery.fileupload.css" rel="stylesheet" />
</head>
<h4>Görev Oluştur</h4>
@using (Html.BeginForm("CreateTask", "Task",new { id=ViewBag.ManagerID}, FormMethod.Post,null))
{

    @Html.AntiForgeryToken()

    <div class="form-horizontal">
    

            <hr />

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            <div class="form-group">
                @Html.LabelFor(model => model.ProjectName, "Proje", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("ProjectName", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.ProjectName, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.TaskType, "Görev Tipi", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("TaskType", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.TaskType, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Summary, "Özet", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Summary, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Summary, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Priority, "Öncelik", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("Priority", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.Priority, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.SDate, "Bildirim Tarihi", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.SDate, new
               {
                   htmlAttributes = new { @class = "form-control" },
                   @class = "form-control datepicker",
                   placeholder = "Enter Drop-off date here..."
               })
                    @Html.ValidationMessageFor(model => model.SDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.EDate, "İstenilen Tarih", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.EDate, new { htmlAttributes = new { @class = "form-control datepicker" } })
                
                    @Html.ValidationMessageFor(model => model.EDate, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.UserID, "Atanan Kişi", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.DropDownList("UserID", null, htmlAttributes: new { @class = "form-control" })
                    @Html.ValidationMessageFor(model => model.UserID, "", new { @class = "text-danger" })
                </div>
            </div>


            <div class="form-group">
                @Html.LabelFor(model => model.Description, "Tanım", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.TextAreaFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
                @Html.LabelFor(model => model.FileUrl, "Dosya Ekle", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    <span class="btn btn-success fileinput-button">
                        <i class="glyphicon glyphicon-plus"></i>
                        <span>Dosyaları seçin.</span>
                        <!-- The file input field used as target for the file upload widget -->
                        <input id="fileupload" type="file" name="files[]" multiple>
                    </span>
                    <br>
                    <br>
                    <!-- The global progress bar -->
                    <div id="progress" class="progress">
                        <div class="progress-bar progress-bar-success"></div>
                    </div>
                    <!-- The container for the uploaded files -->
                    <div id="files" class="files"></div>
                    <br>

                    @Html.ValidationMessageFor(model => model.FileUrl, "", new { @class = "text-danger" })
                </div>
            </div>

            <div class="form-group">
            @Html.LabelFor(model => model.Manager, "Yönetici", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
             @Html.LabelFor(model => model.Manager, (string)@ViewBag.ManagerName)
                @Html.ValidationMessageFor(model => model.Manager, "", new { @class = "text-danger" })
            </div>
        </div>

            <div class="form-group">
                @Html.LabelFor(model => model.Tag, "Etiket", htmlAttributes: new { @class = "control-label col-md-2" })
                <div class="col-md-10">
                    @Html.EditorFor(model => model.Tag, new { htmlAttributes = new { @class = "form-control" } })
                    @Html.ValidationMessageFor(model => model.Tag, "", new { @class = "text-danger" })
                </div>
            </div>



            <div class="form-group">
                <div class="col-md-offset-2 col-md-10">
                    <input type="submit" value="Oluştur" class="btn btn-default" />
                </div>
            </div>
       

          
    </div>

}
@section Scripts {

<script src="~/Scripts/jquery-3.1.1.min.js"></script>

<script src="http://blueimp.github.io/JavaScript-Load-Image/js/load-image.min.js"></script>

<script src="http://blueimp.github.io/JavaScript-Canvas-to-Blob/js/canvas-to-blob.min.js"></script>


<script src="http://netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js"></script>


<script src="~/Content/jQuery-File-Upload-9.18.0/js/vendor/jquery.ui.widget.js"></script>
<script src="~/Content/jQuery-File-Upload-9.18.0/js/jquery.iframe-transport.js"></script>

<script src="~/Content/jQuery-File-Upload-9.18.0/js/jquery.fileupload.js"></script>

<script src="~/Content/jQuery-File-Upload-9.18.0/js/jquery.fileupload-process.js"></script>
<script src="~/Content/jQuery-File-Upload-9.18.0/js/jquery.fileupload-image.js"></script>
<script src="~/Content/jQuery-File-Upload-9.18.0/js/jquery.fileupload-audio.js"></script>

<script src="~/Content/jQuery-File-Upload-9.18.0/js/jquery.fileupload-video.js"></script>
<script src="~/Content/jQuery-File-Upload-9.18.0/js/jquery.fileupload-validate.js"></script>
<script>
    /*jslint unparam: true, regexp: true */
    /*global window, $ */
    $(function () {
        'use strict';
        // sunucu yazılınca sayfayı post etmiyor yazılmazsa yükle butonu post metoduna gidiyor ve görev oluşturuluyor.
        var url = window.location.hostname === 'blueimp.github.io' ?
            '//jquery-file-upload.appspot.com/' : '~/Content/jQuery-File-Upload-9.18.0/server/php/',

            uploadButton = $('<button/>')
                .addClass('btn btn-primary')
                .prop('disabled', true)
                .text('Processing...')
                .on('click', function () {
                    var $this = $(this),
                        data = $this.data();
                    $this
                        .off('click')
                        .text('Abort')
                        .on('click', function () {
                            $this.remove();
                            data.abort();
                        });
                    data.submit().always(function () {
                        $this.remove();
                    });
                });
        $('#fileupload').fileupload({
            url: url,
            dataType: 'json',
            autoUpload: false,
            acceptFileTypes: /(\.|\/)(gif|jpe?g|png)$/i,
            maxFileSize: 999000,
           
            disableImageResize: /Android(?!.*Chrome)|Opera/
                .test(window.navigator.userAgent),
            previewMaxWidth: 100,
            previewMaxHeight: 100,
            previewCrop: true
        }).on('fileuploadadd', function (e, data) {
            data.context = $('<div/>').appendTo('#files');
            $.each(data.files, function (index, file) {
                var node = $('<p/>')
                    .append($('<span/>').text(file.name));
                if (!index) {
                    node
                        .append('<br>')
                        .append(uploadButton.clone(true).data(data));
                }
                node.appendTo(data.context);
            });
        }).on('fileuploadprocessalways', function (e, data) {
            var index = data.index,
                file = data.files[index],
                node = $(data.context.children()[index]);
            if (file.preview) {
                node
                    .prepend('<br>')
                    .prepend(file.preview);
            }
            if (file.error) {
                node
                    .append('<br>')
                    .append($('<span class="text-danger"/>').text(file.error));
            }
            if (index + 1 === data.files.length) {
                data.context.find('button')
                    .text('Yükle')
                    .prop('disabled', !!data.files.error);
            }
        }).on('fileuploadprogressall', function (e, data) {
            var progress = parseInt(data.loaded / data.total * 100, 10);
            $('#progress .progress-bar').css(
                'width',
                progress + '%'
            );
        }).on('fileuploaddone', function (e, data) {
            $.each(data.result.files, function (index, file) {
                if (file.url) {
                    var link = $('<a>')
                        .attr('target', '_blank')
                        .prop('href', file.url);
                    $(data.context.children()[index])
                        .wrap(link);
                } else if (file.error) {
                    var error = $('<span class="text-danger"/>').text(file.error);
                    $(data.context.children()[index])
                        .append('<br>')
                        .append(error);
                }
            });
        }).on('fileuploadfail', function (e, data) {
            $.each(data.files, function (index) {
                var error = $('<span class="text-danger"/>').text('File upload failed.');
                $(data.context.children()[index])
                    .append('<br>')
                    .append(error);
            });
        }).prop('disabled', !$.support.fileInput)
            .parent().addClass($.support.fileInput ? undefined : 'disabled');
    });
</script>

    }